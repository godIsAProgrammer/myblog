<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Caoqisen&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.caoqs.com/"/>
  <updated>2019-04-04T07:33:51.110Z</updated>
  <id>http://blog.caoqs.com/</id>
  
  <author>
    <name>Cao qisen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome to Tranquilpeak 1.7</title>
    <link href="http://blog.caoqs.com/2019/04/05/hello-world/"/>
    <id>http://blog.caoqs.com/2019/04/05/hello-world/</id>
    <published>2019-04-05T12:30:05.000Z</published>
    <updated>2019-04-04T07:33:51.110Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="tranquilpeak" scheme="http://blog.caoqs.com/categories/tranquilpeak/"/>
    
      <category term="releases" scheme="http://blog.caoqs.com/categories/tranquilpeak/releases/"/>
    
    
      <category term="hexo theme" scheme="http://blog.caoqs.com/tags/hexo-theme/"/>
    
      <category term="responsive" scheme="http://blog.caoqs.com/tags/responsive/"/>
    
      <category term="swiftype" scheme="http://blog.caoqs.com/tags/swiftype/"/>
    
      <category term="gravatar" scheme="http://blog.caoqs.com/tags/gravatar/"/>
    
      <category term="disqus" scheme="http://blog.caoqs.com/tags/disqus/"/>
    
      <category term="google analytics" scheme="http://blog.caoqs.com/tags/google-analytics/"/>
    
  </entry>
  
  <entry>
    <title>Object.defineProperty()</title>
    <link href="http://blog.caoqs.com/2018/06/14/defineProperty/"/>
    <id>http://blog.caoqs.com/2018/06/14/defineProperty/</id>
    <published>2018-06-14T02:44:46.647Z</published>
    <updated>2019-04-04T05:59:35.793Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>obj: 要添加或者修改属性的对象（必须）</li><li>prop: 要添加属性的名称（必须）</li><li>descriptor: 要被定义或修改的属性描述符（必须）</li></ul><p>DEMO</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">value: <span class="string">'cao'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name)  <span class="comment">//  cao</span></span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li>返回传递给函数的对象。</li></ul><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote><p>descriptor允许我们准确的描述要添加或者修改的属性。</p></blockquote><p>descriptor可设置的属性有以下几个：</p><ul><li>configurable</li></ul><blockquote><p>默认: false</p><p>当值为true时，该属性不可修改或者删除。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'cao'</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'ccc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);  <span class="comment">// cao</span></span><br></pre></td></tr></table></figure><ul><li>enumerable</li></ul><blockquote><p>默认: false</p><p>当值为true时，该属性才可以被枚举。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'cao'</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)<span class="comment">// name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>value</li></ul><blockquote><p>默认: undefined</p><p>被添加或者修改的属性的值，该值可以是任意的JavaScript value (如 number, object, function, etc)。</p></blockquote><ul><li>writable</li></ul><blockquote><p>默认: false</p><p>当值为true时，value才可以被赋值运算符改变。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'cao'</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'ccc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">// cao</span></span><br></pre></td></tr></table></figure><ul><li>get</li></ul><blockquote><p>默认: undefined</p><p>给该属性提供getter方法，该方法返回属性值value，否则为undefined。</p></blockquote><ul><li>set</li></ul><blockquote><p>默认: undefined</p><p>给该属性提供setter方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Object-defineProperty&quot;&gt;&lt;a href=&quot;#Object-defineProperty&quot; class=&quot;headerlink&quot; title=&quot;Object.defineProperty()&quot;&gt;&lt;/a&gt;Object.defineProperty()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The static method Object.defineProperty() defines a new property directly on an object, or modifies an existing property on an object, and returns the object.   – MDN&lt;br&gt;通过Object.defineProperty()可以在一个对象上定义新的属性或者修改存在的属性，并最终返回该对象。&lt;br&gt;
    
    </summary>
    
    
      <category term="Object.defineProperty" scheme="http://blog.caoqs.com/tags/Object-defineProperty/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API</title>
    <link href="http://blog.caoqs.com/2018/06/11/RESTful/"/>
    <id>http://blog.caoqs.com/2018/06/11/RESTful/</id>
    <published>2018-06-11T13:56:49.719Z</published>
    <updated>2019-04-04T06:00:27.683Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h4 id="REST是设计风格"><a href="#REST是设计风格" class="headerlink" title="REST是设计风格"></a>REST是设计风格</h4><blockquote><p>REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准。</p></blockquote><ul><li>资源是由URI来指定。</li><li>对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。</li><li>通过操作资源的表现形式来操作资源。</li><li>资源的表现形式则是XML或者HTML，也可以是任何其他的格式。 </li></ul><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><blockquote><p>匹配REST设计风格的Web API称为RESTful API。它从以下三个方面资源进行定义：</p></blockquote><ul><li>直观简短的资源地址：URI，比如：<a href="http://xxx.com/resources/。" target="_blank" rel="noopener">http://xxx.com/resources/。</a></li><li>传输的资源：Web服务接受与返回的互联网媒体类型，比如：JSON, XML, YAML等。</li><li>对资源的操作：Web服务在该资源上所支持的一系列请求方法（比如：POST，GET，PUT或DELETE）。</li></ul><h3 id="HTTP请求方法在RESTful-API中的应用"><a href="#HTTP请求方法在RESTful-API中的应用" class="headerlink" title="HTTP请求方法在RESTful API中的应用"></a>HTTP请求方法在RESTful API中的应用</h3><table><thead><tr><th style="text-align:center">资源</th><th style="text-align:center">GET</th><th style="text-align:center">PUT</th><th style="text-align:center">POST</th><th style="text-align:center">DELETE</th></tr></thead><tbody><tr><td style="text-align:center"><font size="2">一组资源的URI，比如<a href="https://xxx.com/resources/" target="_blank" rel="noopener">https://xxx.com/resources/</a></font></td><td style="text-align:center"><font size="2.5">列出URI，以及该资源组中每个资源的详细信息。</font></td><td style="text-align:center"><font size="2.5">使用给定的一组资源替换当前整组资源。</font></td><td style="text-align:center"><font size="2.5">在本组资源中创建/追加一个新的资源。该操作往往返回新资源的URL。</font></td><td style="text-align:center"><font size="2.5">删除整组资源。</font></td></tr><tr><td style="text-align:center"><font size="2.5">单个资源的URI，比如<a href="https://xxx.com/resources/142" target="_blank" rel="noopener">https://xxx.com/resources/142</a></font></td><td style="text-align:center"><font size="2.5">获取指定的资源的详细信息，格式可以自选一个合适的网络媒体类型（比如：XML、JSON等）</font></td><td style="text-align:center"><font size="2.5">替换/创建指定的资源。并将其追加到相应的资源组中。</font></td><td style="text-align:center"><font size="2.5">    把指定的资源当做一个资源组，并在其下创建/追加一个新的元素，使其隶属于当前资源。</font></td><td style="text-align:center"><font size="2.5">删除指定的元素。</font></td></tr></tbody></table><h3 id="REST的优点"><a href="#REST的优点" class="headerlink" title="REST的优点"></a>REST的优点</h3><ul><li>可更高效利用缓存来提高响应速度</li><li>通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性</li><li>浏览器即可作为客户端，简化软件需求</li><li>相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小</li><li>不需要额外的资源发现机制在软件技术演进中的长期的兼容性更好</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是REST-？&quot;&gt;&lt;a href=&quot;#什么是REST-？&quot; class=&quot;headerlink&quot; title=&quot;什么是REST ？&quot;&gt;&lt;/a&gt;什么是REST ？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;  REST（Representational State Transfer）翻译为表现层状态转换，是Roy Thomas Fielding博士于2000年在他的博士论文中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表现层状态转换是根基于超文本传输协议(HTTP)之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。因此表现层状态转换提供了在互联网络的计算系统之间，彼此资源可交互使用的协作性质(interoperability)。相对于其它种类的网络服务，例如 SOAP服务则是以本身所定义的操作集，来访问网络上的资源。&lt;br&gt——摘自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="REST" scheme="http://blog.caoqs.com/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>webpack2配置sass</title>
    <link href="http://blog.caoqs.com/2017/03/19/wepack-1/"/>
    <id>http://blog.caoqs.com/2017/03/19/wepack-1/</id>
    <published>2017-03-19T13:53:40.000Z</published>
    <updated>2019-04-04T06:00:37.027Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h4 id="然后在webpack-config-js如此配置"><a href="#然后在webpack-config-js如此配置" class="headerlink" title="然后在webpack.config.js如此配置"></a>然后在webpack.config.js如此配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">"style-loader"</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: <span class="string">"css-loader"</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: <span class="string">"sass-loader"</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    includePaths: [<span class="string">"absolute/path/a"</span>, <span class="string">"absolute/path/b"</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="如果要配合extract-text-webpack-plugin可以这样配置"><a href="#如果要配合extract-text-webpack-plugin可以这样配置" class="headerlink" title="如果要配合extract-text-webpack-plugin可以这样配置"></a>如果要配合extract-text-webpack-plugin可以这样配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install extract-text-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> extractSass = <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">    filename: <span class="string">"[name].[contenthash].css"</span>,</span><br><span class="line">    disable: process.env.NODE_ENV === <span class="string">"development"</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">            loader: extractSass.extract(&#123;</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">"css-loader"</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    loader: <span class="string">"sass-loader"</span></span><br><span class="line">                &#125;],</span><br><span class="line">                <span class="comment">// use style-loader in development </span></span><br><span class="line">                fallback: <span class="string">"style-loader"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        extractSass</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;首先安装所需要的sass-loader和node-sass&quot;&gt;&lt;a href=&quot;#首先安装所需要的sass-loader和node-sass&quot; class=&quot;headerlink&quot; title=&quot;首先安装所需要的sass-loader和node-sass&quot;&gt;&lt;/a&gt;首先安装所需要的sass-loader和node-sass&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install sass-loader node-sass webpack --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.caoqs.com/tags/CSS/"/>
    
      <category term="webpack2" scheme="http://blog.caoqs.com/tags/webpack2/"/>
    
      <category term="sass" scheme="http://blog.caoqs.com/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>canvas 绘制环形进度条</title>
    <link href="http://blog.caoqs.com/2017/03/14/canvas-1/"/>
    <id>http://blog.caoqs.com/2017/03/14/canvas-1/</id>
    <published>2017-03-14T14:56:34.000Z</published>
    <updated>2019-04-04T06:22:14.364Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">html</span>部分 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"process"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">data-process</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript 部分</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'process'</span>);  <span class="comment">// 获取 canvas对象</span></span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">// 拿到笔触</span></span><br><span class="line"><span class="keyword">var</span> process = canvas.getAttribute(<span class="string">'data-process'</span>); <span class="comment">// 要绘制的百分比</span></span><br><span class="line"><span class="keyword">var</span> x = canvas.width / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> y = canvas.height / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> r = canvas.height / <span class="number">2</span>;</span><br><span class="line">drawArc(ctx, x, y, r, process, <span class="string">'#F6F6F6'</span>, <span class="string">'#FF9600'</span>, <span class="string">'#fff'</span>, <span class="string">'#333'</span>, <span class="number">100</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// ctx : 笔触 ， bgColor：要填充的背景色 ， processColor：进度色， fillColor：内圆填充色</span></span><br><span class="line"><span class="comment">// tColor：内圆文字颜色，fSize：内圆字体大小，process：百分百 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawArc</span> (<span class="params">ctx, x, y, r, process, bgColor, processColor, fillColor, tColor, fSize</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// 背景圆</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(x, y, r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fillStyle = bgColor; <span class="comment">//'#F6F6F6';</span></span><br><span class="line">    ctx.fill();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进度条</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(x, y);  </span><br><span class="line">    ctx.arc(x, y, r, <span class="built_in">Math</span>.PI * <span class="number">1.5</span>, <span class="built_in">Math</span>.PI * (<span class="number">1.5</span> + <span class="number">2</span> * process / <span class="number">100</span>));</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fillStyle = processColor; <span class="comment">// '#FF9600';</span></span><br><span class="line">    ctx.fill();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画内填充圆</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(x, y, <span class="number">140</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fillStyle = fillColor; <span class="comment">// '#fff';</span></span><br><span class="line">    ctx.fill();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充文字</span></span><br><span class="line">    ctx.fillStyle = tColor; <span class="comment">// '#333';</span></span><br><span class="line">    ctx.textAlign = <span class="string">'center'</span>;  </span><br><span class="line">    ctx.textBaseline = <span class="string">'middle'</span>;  </span><br><span class="line">    ctx.font= fSize +　<span class="string">'px'</span> + <span class="string">' Arial'</span>;</span><br><span class="line">    ctx.moveTo(x, y);  </span><br><span class="line">    ctx.fillText(process + <span class="string">'%'</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 涉及的到 arc()方法</span></span><br><span class="line">context.arc(x ,y , r, sAngle, eAngle, counterclockwise);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近工作上有遇到绘制环形进度条的需求，绘制环形进度条可以由传统的css3和canvas实现，这边介绍的是canvas的实现方式。&lt;br&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://blog.caoqs.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://blog.caoqs.com/tags/canvas/"/>
    
      <category term="html5" scheme="http://blog.caoqs.com/tags/html5/"/>
    
      <category term="进度条" scheme="http://blog.caoqs.com/tags/%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>(译）理解浏览器的关键渲染路径</title>
    <link href="http://blog.caoqs.com/2017/03/11/html5-3/"/>
    <id>http://blog.caoqs.com/2017/03/11/html5-3/</id>
    <published>2017-03-11T14:09:40.000Z</published>
    <updated>2019-04-04T06:34:39.145Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><img src="https://github.com/lx7575000/Translation/raw/master/%EF%BC%88%E8%AF%91%EF%BC%89%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/resources/33522AF207FEA0A173E582C7AA4F7427.jpg" alt></li></ol><p>#1. 构造DOM树<br>DOM（Document Object Model）树是一个表示全解析过的HTML页面的对象。从根节点元素<code>&lt;html&gt;</code>开始，会逐个创建页面中的每个元素/文本节点。元素包裹的其他元素会被作为子元素节点，并且每个节点会包含其全部的属性。例如：<code>&lt;a&gt;</code>标签会有<code>href</code>属性与其节点关联。<br>举个🌰：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Introduction<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">small</span>&gt;</span>Copyright 2017<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述HTML会被解析成如下的DOM树<br><img src="https://github.com/lx7575000/Translation/raw/master/%EF%BC%88%E8%AF%91%EF%BC%89%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/resources/1E528A75297C9F4B6566DE7E99897BEB.jpg" alt></p><p>HTML很好的特点在于不需要全部加载完成页面所有内容才来显示网页，可以解析完成一部分内容呈现一部分。但是，其他资源比如CSS和JavaScript会阻止页面的渲染。</p><p>#2. 构建CSSOM树<br>CSSOM（CSS Object Model）是一个表示各个DOM相关样式的对象，它的表示方法与DOM相似，但是各个节点存在相关的样式值。不论其是显示、还是隐式声明这些样式。<br>在<code>style.css</code>文件中，我们有如下样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123; <span class="attribute">color</span>: plum; &#125;  </span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">28px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123; <span class="attribute">color</span>: firebrick; &#125;  </span><br><span class="line"><span class="selector-tag">h2</span> &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123; <span class="attribute">display</span>: none; &#125;</span><br></pre></td></tr></table></figure></p><p>接着会创建如下的CSSOM树：<br><img src="https://github.com/lx7575000/Translation/raw/master/%EF%BC%88%E8%AF%91%EF%BC%89%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/resources/52A7B7356D2DE5A100FD0417C732F2BE.jpg" alt></p><p>CSS一直被认为是一种<strong>渲染阻塞资源</strong>。因此如果在首次加载时没有全部解析资源内容就无法进行渲染树的构建。与HTML不同，CSS具有层叠继承的特性，因此不能进行局部加载。定义在文档后面的样式属性会覆盖或更改写之前定义的同类属性。即，如果如果CSS可以进行局部加载的话会导致出现加载错样式的情况。因此表明，CSS必须全部解析之后才能进行下一步。</p><p>如果CSS文件适用于当前设备的话，仅仅只是会阻塞渲染。<code>&lt;link rel=&quot;stylesheet&quot;&gt;</code>标签可以接受<code>media</code>属性来指定特定样式宽度的特定媒体查询。🌰：如果我们有一个样式表具有<code>orientation:landscape</code>的媒体属性，并且我们查看该页面使用<code>portrait</code>模式，就不会出现资源加载而产生的渲染阻塞情况。</p><p>CSS要会导致脚本阻塞，这是由于JavaScript文件必须等待CSSOM构建结束之后才进行加载。</p><p>#运行JavaScript<br>JavaScript被认为是<strong>解析阻塞资源</strong>，这表示当解析HTML文档自身时候会被JavaScript给阻塞掉。</p><p>当解析器解析到<code>&lt;script&gt;</code>标签时，无论该资源是内部还是外链的都会停止解析，并且等到资源被下载并运行结束后才继续进行解析。这也是为什么如果我们有一个引用了JavaScript文件的元素，它必须被放在可视文档元素之外的原因。</p><p>为避免JavaScript解析阻塞，它可以通过设定<code>async</code>属性来要求其异步加载。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"script.js"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure></p><p>#4 创建渲染树(Render Tree)<br>渲染树是DOM树和CSSOM树的结合体，它代表最终会渲染在页面上的元素的结构对象。它表示只会关注可见内容，对于被隐藏或者CSS属性<code>display:none</code>的属性，不会被包含在结构内。</p><p>使用上面例子的DOM和CSSOM，渲染树被创建如下：<br><img src="https://github.com/lx7575000/Translation/raw/master/%EF%BC%88%E8%AF%91%EF%BC%89%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/resources/37531F7B63C81CA9F5E9DE2DC5D06104.jpg" alt></p><p>#5. 生成布局<br>布局决定了浏览器视窗大小，它提供了上下文依赖的CSS样式，如百分比或窗口的单位。视窗尺寸通常通过<code>&lt;head&gt;</code>标签中的<code>&lt;meta&gt;</code>中的<code>viewport</code>设定来决定。如果不存在该标签，则通常默认为<strong><code>980px</code></strong>。</p><p>例如：最常用的<code>meta viewport</code>值是设定视窗大小与设备宽度对应：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举个🌰，如果用户使用设备访问网页，宽度为1000px。然后整体视窗尺寸就会基于这个宽度值了，比如<code>50%</code>就是500px,<code>10vw</code>就是100px。</p><p>#6. 绘制页面<br>最后，在绘制页面步骤。页面上的所有可见内容都会被转换为像素并呈现在屏幕上。</p><p>具体的绘制时间跟DOM数以及应用的样式有关。有些样式会话费更多的执行时间，比如复杂的渐变背景图片所需要的计算时间远超过简单固定背景色。</p><p>#整合所有<br>想要看到关键渲染路径的执行流程，可以使用Chrome的<strong>DevTools</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Introduction<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">small</span>&gt;</span>Copyright 2017<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看关于页面加载时的事件日志，以下是我们获得的：<br><img src="https://github.com/lx7575000/Translation/raw/master/%EF%BC%88%E8%AF%91%EF%BC%89%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/resources/ADDE5C06B4F85308DD405103BC6DCFF1.jpg" alt></p><ol><li>发送请求：发送<code>GET</code>请求index.html</li><li>解析HTML然后发送请求：开始解析HTML并构建DOM，然后发送<code>GET</code>请求style.css和main.js。</li><li>解析样式表：根据style.css生成CSSOM</li><li>执行计算脚本：执行main.js</li><li>布局：基于HTML的元视窗标签，生成布局</li><li>绘制页面：绘制网页</li></ol><p>文章 by <a href="https://github.com/lx7575000/Translation/blob/master/%EF%BC%88%E8%AF%91%EF%BC%89%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/%EF%BC%88%E8%AF%91%EF%BC%89%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84.md" target="_blank" rel="noopener">lx7575000</a><br><a href="https://bitsofco.de/understanding-the-critical-rendering-path/" target="_blank" rel="noopener">原文链接：Understanding the Critical Rendering Path</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#(译）理解浏览器的关键渲染路径&lt;br&gt;&lt;strong&gt;前些日子在面试的时候有被问及过， 当时的回答不是让面试官很满意，今天刚好在网上看到这篇博文，感觉解释的很好就转了。文章末尾有原文链接地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当浏览器接收到从服务器发送过来的HTML页面信息，在将其绘画渲染到屏幕上之前会有许多的步骤要做。浏览器绘制页面需要做的这一系列行为我们称为&lt;strong&gt;关键渲染路径。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解&lt;strong&gt;CRP&lt;/strong&gt;的知识对于你理解如何提升网站渲染效率非常有用，&lt;strong&gt;CRP&lt;/strong&gt;总共有六步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建DOM树&lt;/li&gt;
&lt;li&gt;构建CSSOM树&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;JavaScript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建渲染树&lt;/li&gt;
&lt;li&gt;生成布局&lt;/li&gt;
&lt;li&gt;绘制页面
    
    </summary>
    
      <category term="浏览器渲染" scheme="http://blog.caoqs.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    
    
      <category term="html" scheme="http://blog.caoqs.com/tags/html/"/>
    
      <category term="浏览器加载" scheme="http://blog.caoqs.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="前端杂文" scheme="http://blog.caoqs.com/tags/%E5%89%8D%E7%AB%AF%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>chrome input autofill 自动填充背景色问题</title>
    <link href="http://blog.caoqs.com/2017/03/04/css-2/"/>
    <id>http://blog.caoqs.com/2017/03/04/css-2/</id>
    <published>2017-03-04T15:17:52.000Z</published>
    <updated>2019-04-04T05:59:19.372Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>box-shadow的作用是给盒子添加一个阴影。参数如下：</p><table><thead><tr><th>参数</th><th style="text-align:right">是否必选</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>h-shadow</td><td style="text-align:right">必选</td><td style="text-align:center">水平阴影的位置，可以为负</td></tr><tr><td>v-shadow</td><td style="text-align:right">必选</td><td style="text-align:center">垂直阴影的位置，可以为负</td></tr><tr><td>blur</td><td style="text-align:right">可选</td><td style="text-align:center">模糊距离</td></tr><tr><td>spread</td><td style="text-align:right">可选</td><td style="text-align:center">阴影尺寸</td></tr><tr><td>color</td><td style="text-align:right">可选</td><td style="text-align:center">阴影颜色</td></tr><tr><td>inset</td><td style="text-align:right">可选</td><td style="text-align:center">设置后将外部阴影设置为内部阴影</td></tr></tbody></table><p>这种方式实际上是通过给input框内部添加一个指定颜色阴影的方式达到设置input背景色的视觉效果。<br>但是，如果需求是input的背景颜色透明呢？</p><h2 id="方法二：animation"><a href="#方法二：animation" class="headerlink" title="方法二：animation"></a>方法二：animation</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> setbackgroundcolor &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: transparent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-animation-name</span>: setbackgroundcolor;</span><br><span class="line">    <span class="attribute">-webkit-animation-fill-mode</span>: forwards;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式为input:-webkit-autofill绑定了一个动画效果setbackgroundcolor，并将其填充模式(fill-mode)设置为forwards(保留动画结束后的效果)。<br>标签绑定动画后，若不指定动画时长animation-duration，将无法看到动画的播放效果而直接完成动画。<br>这里直接将动画效果设为背景色透明，指定填充模式为forwards，相当于将input:-webkit-autofill的背景重设成了透明。</p><p>参考链接：<br><a href="http://stackoverflow.com/questions/2781549/removing-input-background-colour-for-chrome-autocomplete" target="_blank" rel="noopener">http://stackoverflow.com/questions/2781549/removing-input-background-colour-for-chrome-autocomplete</a><br><a href="http://www.w3school.com.cn/cssref/pr_box-shadow.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_box-shadow.asp</a><br><a href="http://www.w3school.com.cn/cssref/pr_animation-name.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_animation-name.asp</a><br><a href="http://www.w3school.com.cn/cssref/pr_animation-duration.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_animation-duration.asp</a><br><a href="http://www.w3school.com.cn/cssref/pr_animation-fill-mode.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_animation-fill-mode.asp</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://stackoverflow.com/questions/2781549/removing-input-background-colour-for-chrome-autocomplete&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;stackoverflow&lt;/a&gt;发现解决方法如下：&lt;/p&gt;
&lt;h2 id=&quot;方法一：box-shadow&quot;&gt;&lt;a href=&quot;#方法一：box-shadow&quot; class=&quot;headerlink&quot; title=&quot;方法一：box-shadow&quot;&gt;&lt;/a&gt;方法一：box-shadow&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:-webkit-autofill&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000px&lt;/span&gt; white inset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;box-shadow-h-shadow-v-shadow-blur-spread-color-inset&quot;&gt;&lt;a href=&quot;#box-shadow-h-shadow-v-shadow-blur-spread-color-inset&quot; class=&quot;headerlink&quot; title=&quot;box-shadow: h-shadow v-shadow blur spread color inset;&quot;&gt;&lt;/a&gt;box-shadow: h-shadow v-shadow blur spread color inset;&lt;/h3&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.caoqs.com/tags/CSS/"/>
    
      <category term="chrome" scheme="http://blog.caoqs.com/tags/chrome/"/>
    
      <category term="input" scheme="http://blog.caoqs.com/tags/input/"/>
    
  </entry>
  
  <entry>
    <title>CSS中一个冒号和两个冒号有什么区别</title>
    <link href="http://blog.caoqs.com/2017/02/24/css-1/"/>
    <id>http://blog.caoqs.com/2017/02/24/css-1/</id>
    <published>2017-02-24T14:53:00.000Z</published>
    <updated>2019-04-04T05:58:51.338Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br>首先，阅读 w3c 对两者的定义：</p><pre><code>CSS 伪类用于向某些选择器添加特殊的效果。CSS 伪元素用于将特殊的效果添加到某些选择器。</code></pre><p>可以明确两点，第一两者都与选择器相关，第二就是添加一些“特殊”的效果。这里特殊指的是两者描述了其他 css 无法描述的东西。</p><p>伪类可以独立于文档的元素来分配样式，且可以分配给任何元素，逻辑上和功能上类类似，但是其是预定义的、不存在于文档树中且表达方式也不同，所以叫伪类。</p><p>伪元素所控制的内容和一个元素控制的内容一样，但是伪元素不存在于文档树中，不是真正的元素，所以叫伪元素。</p><p>伪类有：</p><pre><code>:first-child ，:link:，vistited，:hover:，active:focus，:lang，:not(s)，：root等...</code></pre><p>伪元素有：</p><pre><code>:first-line，:first-letter，:before，:after，:placeholder,:selection</code></pre><p>提醒，如果你的网站只需要兼容webkit、firefox、opera等浏览器，建议对于伪元素采用双冒号的写法，如果不得不兼容IE浏览器，还是用CSS2的单冒号写法比较安全。如果自己不确定的话可以针对某些需要兼容的属性有两种属性。</p><p>伪类和伪元素的区别：</p><p>伪类<br>伪类选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，而不是元素的id、class、属性等静态的标志。由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于文档之外的抽象，所以叫伪类。</p><p>E:link</p><pre><code>伪类将应用于未被访问过的链接，与:visited互斥。</code></pre><p>E:hover</p><pre><code>伪类将应用于有鼠标指针悬停于其上的元素。</code></pre><p>E:active</p><pre><code>伪类将应用于被激活的元素，如被点击的链接、被按下的按钮等。</code></pre><p>E:visited</p><pre><code>伪类将应用于已经被访问过的链接，与:link互斥。</code></pre><p>E:focus</p><pre><code>伪类将应用于拥有键盘输入焦点的元素。</code></pre><p>E:first-child</p><pre><code>伪类将应用于元素在页面中第一次出现的时候。</code></pre><p>E:lang</p><pre><code>伪类将应用于元素带有指定lang的情况。//示例p:lang(zh-cmn-Hans) {  color: #f00;}p:lang(en) {  color: #090;}&lt;p lang=&quot;zh&quot;&gt;中国&lt;/p&gt;&lt;p lang=&quot;en&quot;&gt;english&lt;/p&gt;</code></pre><p>E:not(s)</p><pre><code>匹配不含有s选择符的元素E。//示例（给该列表中除最后一项外的所有列表项加一条底边线）.demo li:not(:last-child) {  border-bottom: 1px solid #ddd;}</code></pre><p>E:root</p><pre><code>匹配E元素在文档的根元素。//示例（非IE文本将为black，IE9及以上为purple，IE8为yellow，IE7为blue，IE6为red）.test {  color: black;  color: yellow\0;  *color: blue;  _color: red;}html:root .test {  color: purple\0;}</code></pre><p>伪元素<br>与伪类针对特殊状态的元素不同的是，伪元素是对元素中的特定内容进行操作，它所操作的层次比伪类更深了一层，也因此它的动态性比伪类要低得多。实际上，设计伪元素的目的就是去选取诸如元素内容第一个字（母）、第一行，选取某些内容前面或后面这种普通的选择器无法完成的工作。它控制的内容实际上和元素是相同的，但是它本身只是基于元素的抽象，并不存在于文档中，所以叫伪元素。</p><p>E::first-letter</p><pre><code>伪元素的样式将应用于元素文本的第一个字（母）。</code></pre><p>E::first-line</p><pre><code>伪元素的样式将应用于元素文本的第一行。</code></pre><p>E::before</p><pre><code>在元素内容的最前面添加新内容。</code></pre><p>E::after</p><pre><code>在元素内容的最后面添加新内容。// 清楚浮动示例.clearfix::before, .clearfix::after {  content:&quot;&quot;;  display:table;}.clearfix::after {  clear:both;}.clearfix {  zoom:1; /* For IE 6/7 (trigger hasLayout) */}</code></pre><p>E::placeholder</p><pre><code>用于控制表单输入框占位符的外观，它允许开发者/设计师改变文字占位符的样式，默认的文字占位符为浅灰色。// 示例input::-webkit-input-placeholder {  color: #999;}input:-ms-input-placeholder { // IE10+  color: #999;}input:-moz-placeholder { // Firefox4-18  color: #999;}input::-moz-placeholder { // Firefox19+  color: #999;}</code></pre><p>E::selection</p><pre><code>定义元素被选择时的background-color，color及text-shadow(IE11尚不支持定义该属性)。//示例（将选中字体的颜色设置为#f00，背景颜色设置为#000）p::-moz-selection{background:#000;color:#f00;}p::selection{background:#000;color:#f00;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时工作中用到伪类选择器的时候一个冒号和两个冒号貌似都是可以的，所以两者到底有什么区别呢，我们先来看下W3C关于CSS3选择器的规范中有一段描述： &lt;/p&gt;
&lt;p&gt;　　A pseudo-element is made of two colons (::) followed by the name of the pseudo-element. &lt;/p&gt;
&lt;p&gt;　　This :: notation is introduced by the current document in order to establish a discrimination between pseudo-classes and pseudo-elements. For compatibility with existing style sheets, user agents must also accept the previous one-colon notation for pseudo-elements introduced in CSS levels 1 and 2 (namely, :first-line, :first-letter, :before and :after). This compatibility is not allowed for the new pseudo-elements introduced in CSS level 3. &lt;/p&gt;
&lt;p&gt;　　简单翻译一下，大意就是，伪元素由双冒号和伪元素名称组成。双冒号是在当前规范中引入的，用于区分伪类和伪元素。但是伪类兼容现存样式，浏览器需要同时支持旧的伪类，比如:first-line、:first-letter、:before、:after等。&lt;br&gt;那么问题来了，什么是伪类？什么是伪元素？&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.caoqs.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5.1 响应式图像</title>
    <link href="http://blog.caoqs.com/2017/02/19/html5-1/"/>
    <id>http://blog.caoqs.com/2017/02/19/html5-1/</id>
    <published>2017-02-19T15:15:48.000Z</published>
    <updated>2019-04-04T06:00:02.649Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br>你可以使用 srcset 属性并且带上它自有的 x 修饰符来描述每一个图片的像素比例, 如果用户的像素比例等于 3，就会显示 high-res 这张图片。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"clicks/low-res.jpg"</span> <span class="attr">srcset</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/low-res.jpg 1x, </span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/medium-res.jpg 2x, </span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/high-res.jpg 3x"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></p><p>除了像素比例之外，你也可以选择使用 w 修饰符来指定不同尺寸大小的图片。在如下示例中，high-res 图片被定义成在宽度为 1600px 时显示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"clicks/low-res.jpg"</span> <span class="attr">srcset</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/low-res.jpg 500w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/medium-res.jpg 1000w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/high-res.jpg 1600w"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="sizes-图像属性"><a href="#sizes-图像属性" class="headerlink" title="sizes 图像属性"></a>sizes 图像属性</h3><p>大多数时候创作者们都喜欢针对不同的屏幕尺寸显示不同的图片。这个可以用 sizes 属性做到。它让你可以针对分配给图像显示的空间大小来对宽度做出调整, 然后使用 srcset 属性来挑选合适的图片来显示。例如…<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"clicks/low-res.jpg"</span> <span class="attr">sizes</span>=<span class="string">"(max-width: 25em) 60vw, 100vw"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">"clicks/low-res.jpg 500w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/medium-res.jpg 1000w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  clicks/high-res.jpg 1600w"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里， sizes 属性定义了在视窗大于 25 em 时图像宽度为视窗宽度的 100%，或者在小于等于 25em 时为视图宽度的 60%。</p><h3 id="picture-元素"><a href="#picture-元素" class="headerlink" title="picture 元素"></a>picture 元素</h3><p>picture 元素让你可以针对不同的屏幕尺寸声明图片。这个可以通过用 <picture> 元素封装 <img> ，并且描述多个 <source> 子元素来实现。</picture></p><p><picture> 标记单独使用并不会显示任何东西。你已经被假定会声明默认的图像来源作为  src 属性的取值，而可选的图像来源则会放在 scrset 属性之中，如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width: 25em)"</span> <span class="attr">srcset</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    clicks/small/low-res.jpg 1x,</span></span></span><br><span class="line"><span class="tag"><span class="string">    clicks/small/medium-res.jpg 2x, </span></span></span><br><span class="line"><span class="tag"><span class="string">    clicks/small/high-res.jpg 3x</span></span></span><br><span class="line"><span class="tag"><span class="string">  "</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width: 60em)"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">clicks</span>/<span class="attr">large</span>/<span class="attr">low-res.jpg</span> <span class="attr">1x</span>,</span></span><br><span class="line"><span class="tag">    <span class="attr">clicks</span>/<span class="attr">large</span>/<span class="attr">medium-res.jpg</span> <span class="attr">2x</span>, </span></span><br><span class="line"><span class="tag">    <span class="attr">clicks</span>/<span class="attr">large</span>/<span class="attr">high-res.jpg</span> <span class="attr">3x</span></span></span><br><span class="line"><span class="tag">  "&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"clicks/default/medium-res.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></picture></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML5-1-响应式图像&quot;&gt;&lt;a href=&quot;#HTML5-1-响应式图像&quot; class=&quot;headerlink&quot; title=&quot;HTML5.1 响应式图像&quot;&gt;&lt;/a&gt;HTML5.1 响应式图像&lt;/h2&gt;&lt;p&gt;W3C 引入了一些功能特性，无需使用 CSS 就可以实现响应式图像。它们是 …&lt;/p&gt;
&lt;h3 id=&quot;srcset-图像属性&quot;&gt;&lt;a href=&quot;#srcset-图像属性&quot; class=&quot;headerlink&quot; title=&quot;srcset 图像属性&quot;&gt;&lt;/a&gt;srcset 图像属性&lt;/h3&gt;&lt;p&gt;srcset 属性让你可以指定一个多个可选的图像来源，对应于不同的像素分辨率。它将允许浏览器根据用户设备的不同选择合适质量的实现来进行显示。例如，对于使用网络比较慢的移动设备的用户，显示一张低分辨率的图片会比较好。&lt;br&gt;
    
    </summary>
    
    
      <category term="html5.1" scheme="http://blog.caoqs.com/tags/html5-1/"/>
    
      <category term="srcset" scheme="http://blog.caoqs.com/tags/srcset/"/>
    
      <category term="sizes" scheme="http://blog.caoqs.com/tags/sizes/"/>
    
      <category term="picture" scheme="http://blog.caoqs.com/tags/picture/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.caoqs.com/2017/01/01/hello-world%202/"/>
    <id>http://blog.caoqs.com/2017/01/01/hello-world 2/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2018-06-10T12:47:36.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="Hello World" scheme="http://blog.caoqs.com/tags/Hello-World/"/>
    
  </entry>
  
</feed>
